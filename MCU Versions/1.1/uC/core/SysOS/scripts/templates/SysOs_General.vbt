.Imports Microsoft.VisualBasic
.Imports System
.Imports System.IO
.Imports System.Collections.Generic
.
.
.Public Module SysOs_General
.
.    ' Global List of Processes
.    Public Processes As New List(Of Process)
.
.    ' Global List of Process Groups
.    Public ProcessGroups As New List(Of ProcessGroup)
.
.    ' Global List of Process Sections
.    Public ProcessSections As New List(Of ProcessSection)
.
.    Public Function Evaluate_Processes() As Boolean
.        Dim retval As Boolean = True
.
.        Console.WriteLine("Evaluating the Processes...")
.        ' Build the Process Sections
.        ProcessSections.Clear()
.        For Each myProcessSectionDef As ProcessSectionDef In ProcessSectionDefs
.            For Each myProcessSection As ProcessSection In myProcessSectionDef.ProcessSections
.                If CBool(myProcessSection.Enabled) = True Then
.                    If ProcessSections.Find(Function(x) x.Name = myProcessSection.Name) Is Nothing Then
.						Dim myTask as Task = pSysOs.Config.Tasks.Find(Function(x) x.Name = myProcessSection.TaskRef)
.						If myTask IsNot Nothing
.							ProcessSections.Add(myProcessSection)
.							Console.WriteLine("Process Section : " + myProcessSection.Name)
.						Else
.                        	Console.WriteLine("ERROR: Invalid Task " + myProcessSection.TaskRef + " (" + myProcessSection.Name + ")")
.                        	retval = False
.						End If
.                    Else
.                        Console.WriteLine("ERROR: Multiple definition of the process section " + myProcessSection.Name)
.                        retval = False
.                    End If
.                Else
.                    Console.WriteLine("WARNING: Process Section " + myProcessSection.Name + " ignored as it is disabled.")
.                End If
.            Next
.        Next
.
.        ' Build the Process Groups
.        ProcessGroups.Clear()
.        For Each myProcessGroupDef As ProcessGroupDef In ProcessGroupDefs
.            For Each myProcessGroup As ProcessGroup In myProcessGroupDef.ProcessGroups
.                If CBool(myProcessGroup.Enabled) = True Then
.                    Dim myProcessSection As ProcessSection = ProcessSections.Find(Function(x) x.Name = myProcessGroup.ProcessSectionRef)
.                    If myProcessSection Is Nothing Then
.                        Console.WriteLine("ERROR: Invalid Process Section " + myProcessGroup.ProcessSectionRef + " (" + myProcessGroup.Name + ")")
.                        retval = False
.                    Else
.                        If ProcessGroups.Find(Function(x) x.Name = myProcessGroup.Name) Is Nothing Then
.                            ProcessGroups.Add(myProcessGroup)
.							 Console.WriteLine("Process Group : " + myProcessGroup.Name)
.                        Else
.                            Console.WriteLine("ERROR: Multiple definition of the Process Group " + myProcessGroup.Name)
.                            retval = False
.                        End If
.                    End If
.                Else
.                    Console.WriteLine("WARNING: Process Group " + myProcessGroup.Name + " ignored as it is disabled.")
.                End If
.            Next
.        Next
.
.        ' Build the Processes
.        Processes.Clear()
.        For Each mySubSystem As SubSystem In SubSystems
.            For Each myProcess As Process In mySubSystem.Config.Processes
.               If CBool(myProcess.Enabled) = True Then
.                    Dim myProcessGroup As ProcessGroup = ProcessGroups.Find(Function(x) x.Name = myProcess.ProcessGroupRef)
.                    If myProcessGroup Is Nothing Then
.                        Console.WriteLine("ERROR: Invalid Process Group " + myProcess.ProcessGroupRef + " (" + myProcess.Name + ")")
.                        retval = False
.                    Else
.                        If Processes.Find(Function(x) x.Name = myProcess.Name) Is Nothing Then
.                            Processes.Add(myProcess)
.							 Console.WriteLine("Process : " + myProcess.Name)
.                        Else
.                            Console.WriteLine("ERROR: Multiple definition of the process " + myProcess.Name)
.                            retval = False
.                        End If
.                    End If
.                End If
.            Next
.        Next
.
.        Return retval
.    End Function
.
.    ' This function will return the processes under the Task sorted and listed
.    Public Function Get_Process_List(ByVal TaskName As String) As List(Of String)
.
.        Dim myList As New List(Of String)
.
.        Dim myPSList As New List(Of ProcessSection)
.
.        For Each myProcessSection As ProcessSection In ProcessSections
.            If myProcessSection.TaskRef = TaskName Then
.                myPSList.Add(myProcessSection)
.            End If
.        Next
.
.        myPSList.Sort(Function(x, y) x.Index.CompareTo(y.Index))
.
.        For Each myPS As ProcessSection In myPSList
.            Dim myPGList As New List(Of ProcessGroup)
.            For Each myProcessGroup As ProcessGroup In ProcessGroups
.                If myProcessGroup.ProcessSectionRef = myPS.Name Then
.                    myPGList.Add(myProcessGroup)
.                End If
.            Next
.
.            ' Sort the list by the Index
.            myPGList.Sort(Function(x, y) x.Index.CompareTo(y.Index))
.
.            ' Now sort and add the Processes under each Process Groups
.            For Each myPG As ProcessGroup In myPGList
.
.                Dim myProcessList As New List(Of Process)
.
.                For Each myProcess As Process In Processes
.                    If myProcess.ProcessGroupRef = myPG.Name Then
.                        myProcessList.Add(myProcess)
.                    End If
.                Next
.
.                If myProcessList IsNot Nothing Then
.                    If myProcessList.Count > 0 Then
.                        ' Sort the list
.                        myProcessList.Sort(Function(x, y) x.Index.CompareTo(y.Index))
.
.                        For Each myP As Process In myProcessList
.                            myList.Add(myP.Name)
.                        Next
.                    End If
.                End If
.
.                myProcessList.Clear()
.
.            Next
.        Next
.
.        Return myList
.
.    End Function
.
.    Public Function SysOs_Get_MaxTaskFactor(ByVal Core As UInteger) As UInteger
.        Dim myMax As UInteger = 0
.        For Each myTask as Task in pSysOs.Config.Tasks
.            If (CBool(myTask.Enabled) = True) And (myTask.Core = Core) Then
.                If myMax < myTask.Factor Then
.                    myMax = myTask.Factor
.                End If
.            End If
.        Next
.        Return myMax
.    End Function
.
.    Public Function SubSystem_GetFiles(ByVal mySubSystem As SubSystem, ByVal SearchPattern As String) As List(Of FileInfo)
.        Dim di As DirectoryInfo = New DirectoryInfo(mySubSystem.ModulePath)
.        Dim files() As FileInfo = di.GetFiles(SearchPattern, SearchOption.AllDirectories)
.        Dim myFileList As New List(Of FileInfo)
.        For Each myFile as FileInfo in files
.            Dim myFileName As String = Path.GetFileName(myFile.Name)
.            For Each myExcludeFile As ExcludeFile In mySubSystem.General.ExcludeFileList
.                If myExcludeFile.ExcludeFile.ToLower.Contains(myFileName.ToLower) Then
.                    myFileName = ""
.                    Exit For
.                End If
.            Next
.            If myFileName <> "" Then
.                myFileList.Add(myFile)
.            End If
.        Next
.        Return myFileList
.    End Function
.
.    Public Function Process_GetTaskFactor(ByVal ProcessName As String) As UInteger
.        Dim myTaskFactor As UInteger = 0
.
.        ' Evaluate Processes before getting the Task Factor
.        Evaluate_Processes()
.
.        If Processes IsNot Nothing Then
.            If Processes.Count > 0 Then
.                
.                ' Get the Process
.                Dim myProcess As Process = Processes.Find(Function(x) x.Name = ProcessName)
.
.                If myProcess IsNot Nothing Then
.                    If myProcess.Enabled Then
.                        If myProcess.ProcessGroupRef IsNot Nothing Then
.                            ' Get the Process Group
.                            Dim myProcessGroup As ProcessGroup = ProcessGroups.Find(Function(x) x.Name = myProcess.ProcessGroupRef)
.
.                            If myProcessGroup IsNot Nothing Then
.
.                                If myProcessGroup.Enabled Then
.                                    If myProcessGroup.ProcessSectionRef IsNot Nothing Then
.                                        ' Get the Process Section
.                                        Dim myProcessSection As ProcessSection = ProcessSections.Find(Function(x) x.Name = myProcessGroup.ProcessSectionRef)
.
.                                        If myProcessSection IsNot Nothing Then
.
.                                           If myProcessSection.Enabled Then
.                                                If myProcessSection.TaskRef IsNot Nothing Then
.                                                    ' Get the Task
.                                                    Dim myTask As Task = pSysOs.Config.Tasks.Find(Function(x) x.Name = myProcessSection.TaskRef)
.
.                                                    If myTask IsNot Nothing Then
.                                                        If myTask.Enabled Then
.                                                            myTaskFactor = myTask.Factor
.                                                        Else
.                                                            Console.WriteLine("ERROR: The Process " + myProcessSection.TaskRef + "\" + myProcessGroup.ProcessSectionRef + "\" + myProcess.ProcessGroupRef + "\" + ProcessName + " is not Enabled")
.                                                        End If
.                                                    Else
.                                                        Console.WriteLine("ERROR: Unable to find the Task " + myProcessSection.TaskRef)
.                                                    End If
.                                                Else
.                                                    Console.WriteLine("ERROR: The Process " + ProcessName + " is not associated with any Tasks")
.                                                End If
.                                            Else
.                                                Console.WriteLine("ERROR: The Process " + myProcessGroup.ProcessSectionRef + "\" + myProcess.ProcessGroupRef + "\" + ProcessName + " is not Enabled")
.                                            End If
.                                        Else
.                                            Console.WriteLine("ERROR: Unable to find the Process Section " + myProcessGroup.ProcessSectionRef)
.                                        End If
.                                    Else
.                                        Console.WriteLine("ERROR: The Process " + myProcess.ProcessGroupRef + "\" + ProcessName + " is not associated with any Process Section")
.                                    End If
.                                Else
.                                    Console.WriteLine("ERROR: The Process " + myProcess.ProcessGroupRef + "\" + ProcessName + " is not Enabled")
.                                End If
.                            Else
.                                Console.WriteLine("ERROR: Unable to find the Process Group " + myProcess.ProcessGroupRef)
.                            End If
.                        Else
.                            Console.WriteLine("ERROR: The Process " + ProcessName + " is not associated with any Process Groups")
.                        End If
.                    Else
.                        Console.WriteLine("ERROR: The Process " + ProcessName + " is not Enabled")
.                    End If
.                Else
.                    Console.WriteLine("ERROR: Unable to find the Process " + ProcessName)
.                End If
.            End If
.        End If
.
.        Return myTaskFactor
.
.    End Function
.
.
.End Module