.imports system
.imports system.io
.Imports System.Collections.Generic
.public module SysOs_Processes_C_VBT

.output SysOs_Processes.c
.sw.writeline(CopyRightsComments())
#include "Includes.h"
#include SYSOS_H

/**********************************
 * Global Variables Declarations
 **********************************/
BOOL Task_Overrun_Flag = FALSE;
.if CBool(pSysOs.General.DualCoreScheduling) = False then
SysOS_Ctrl_ST SysOS_Ctrl;

#if(P_SYS_OS_TASK_FACTOR_MAX > 2)
UWORD g_SysOS_Counter;
#endif
.else
SysOS_Ctrl_0_ST SysOS_Ctrl_0;
SysOS_Ctrl_1_ST SysOS_Ctrl_1;

#if(P_SYS_OS_TASK_FACTOR_MAX_0 > 2)
UWORD g_SysOS_Counter_0;
#endif

#if(P_SYS_OS_TASK_FACTOR_MAX_1 > 2)
UWORD g_SysOS_Counter_1;
#endif

.if CBool(pSysOs.General.StackOverflowMonitoring) = True then
SysOs_MinStack_ST SysOs_MinStackBytes;
SysOs_StackMonCount_ST SysOs_StackMonCount;
.end if
.end if

.if (pSysOs.General.Method.ToUpper() = "RTOS") then
/* RTOS Task Handles */
.for each myTask as Task in pSysOs.Config.Tasks
.if (CBool(myTask.Enabled) = True) And (myTask.Factor <> 0) then
TaskHandle_t g_SysOs_TaskHandle_$(myTask.Name) = ((TaskHandle_t)NULL);
.end if
.next
.end if

/* Extern Declaration of all the Processes */
.' Evaluate Processes before proceeding to any implementation
.Evaluate_Processes()
.for each myProcess as Process in Processes
extern void $(myProcess.Name)(void);
.next

/* Define the Process calls for the Tasks */

.for each myTask as Task in pSysOs.Config.Tasks
.if CBool(myTask.Enabled) = True then
/* Definition for the task $(myTask.Name) */
.if (pSysOs.General.Method.ToUpper() = "RTOS") then
void PRC_SYSOS_TASK_$(myTask.Name.ToUpper())(void * args)
.else
void PRC_SYSOS_TASK_$(myTask.Name.ToUpper())(void)
.end if
{
.if (pSysOs.General.Method.ToUpper() = "RTOS") then
.if myTask.Factor <> 0 then
	while(1) {
		
		/* Execute the Listed Processes */
.end if
.end if
.dim myFunctions as List(Of String) = Get_Process_List(myTask.Name)
.for each myFunction as String in myFunctions
		$(myFunction)();
.next
.if (pSysOs.General.Method.ToUpper() = "RTOS") then
.if myTask.Factor <> 0 then
		
		/* At the end of the task execution, suspend the task */
		vTaskSuspend(g_SysOs_TaskHandle_$(myTask.Name));
	}
.end if
.end if
}

.end if
.next

void FUN_SYS_Internal_Init(void)
{
	/* Initialize All the Tasks with Factor 1 as TRUE by default */
.for each myTask as Task in pSysOs.Config.Tasks

.if CBool(myTask.Enabled) = True then
.if myTask.Factor = 1 then
.if CBool(pSysOs.General.DualCoreScheduling) = False then
	SysOS_Ctrl.Is$(myTask.Name) = TRUE;
.else
	SysOS_Ctrl_$(myTask.Core).Is$(myTask.Name) = TRUE;
.end if
.if CBool(pSysOs.General.StackOverflowMonitoring) = True then
	SysOs_MinStackBytes.v$(myTask.Name) = 0;
	SysOs_StackMonCount.cnt_$(myTask.Name) = P_SYS_OS_STACK_OVERFLOW_WAIT_CYCLES;
.end if
.elseif myTask.Factor = 0 then
.if (pSysOs.General.Method.ToUpper() = "RTOS") then
	PRC_SYSOS_TASK_$(myTask.Name.ToUpper())(NULL);
.else
	PRC_SYSOS_TASK_$(myTask.Name.ToUpper())();
.end if
.end if
.end if
.next
}

.if CBool(pSysOs.General.DualCoreScheduling) = False then
void FUN_SYS_Internal_Evaluate_Tasks_x1(void)
{
	/**********************************************/
	/* Tasks with Factor 0 will not be considered */
	/* Tasks with Factor 1 will be Ignored        */
	/* Toggle the Tasks which has the factor of 2 */
	/**********************************************/

.for each myTask as Task in pSysOs.Config.Tasks
.if CBool(myTask.Enabled) = True then
.if myTask.Factor = 1 then
	/* Task $(myTask.Name) Ignored as the factor was 1 */
.elseif myTask.Factor = 0 then
	/* Task $(myTask.Name) Ignored as the factor was 0 */
.elseif myTask.Factor = 2 then
	/* Toggle the Tasks which has the factor of 2 */
	SysOS_Ctrl.Is$(myTask.Name) = !SysOS_Ctrl.Is$(myTask.Name);
.else
	SysOS_Ctrl.Is$(myTask.Name) = (g_SysOS_Counter % $(myTask.Factor)) ? FALSE : TRUE;
.end if
.end if
.next
#if (P_SYS_OS_TASK_FACTOR_MAX > 2)

	/* Increment the counter for next run */
	g_SysOS_Counter++;
	if(g_SysOS_Counter > P_SYS_OS_TASK_FACTOR_MAX)
	{
		/* Resetting the counter to zero will cause all tha tasks to be executed once again. */
		/* So Set the value of g_SysOS_Counter to 1	*/
		g_SysOS_Counter = 1; 
	}
#endif
}

void FUN_SYS_Internal_Execute_Tasks(void)
{
.' Sort the Tasks by Factor and ignore the Tasks with 0 as Factor
. Dim myTasks as New List(Of Task)
.for each myTask as Task in pSysOs.Config.Tasks
.if CBool(myTask.Enabled) = True then
.if myTask.Factor <> 0 then
.myTasks.Add(myTask)
.end if
.end if
.next
	Task_Overrun_Flag = TRUE;
.myTasks.Sort(Function(x, y) x.Factor.CompareTo(y.Factor))
.' Now loop thru the myTasks
.'
.for each myT as Task in myTasks

.if myT.Factor = 1 then
	PRC_SYSOS_TASK_$(myT.Name.ToUpper())();
.else
	if(SysOS_Ctrl.Is$(myT.Name) == TRUE){ PRC_SYSOS_TASK_$(myT.Name.ToUpper())();}
.end if

.next
	Task_Overrun_Flag = FALSE;
}
.'
.' If the Dual Core is enabled then update the functions accordingly
.'
.else
/* Task Evaluation function for Core-0 */
void FUN_SYS_Internal_Evaluate_Tasks_x1_0(void)
{
	/**********************************************/
	/* Tasks with Factor 0 will not be considered */
	/* Tasks with Factor 1 will be Ignored        */
	/* Toggle the Tasks which has the factor of 2 */
	/**********************************************/

.for each myTask as Task in pSysOs.Config.Tasks
.if (CBool(myTask.Enabled) = True) And (myTask.Core = 0) then
.if myTask.Factor = 1 then
	/* Task $(myTask.Name) Ignored as the factor was 1 */
.elseif myTask.Factor = 0 then
	/* Task $(myTask.Name) Ignored as the factor was 0 */
.elseif myTask.Factor = 2 then
	/* Toggle the Tasks which has the factor of 2 */
	SysOS_Ctrl_0.Is$(myTask.Name) = !SysOS_Ctrl_0.Is$(myTask.Name);
.else
	SysOS_Ctrl_0.Is$(myTask.Name) = (g_SysOS_Counter_0 % $(myTask.Factor)) ? FALSE : TRUE;
.end if
.end if
.next
#if (P_SYS_OS_TASK_FACTOR_MAX_0 > 2)

	/* Increment the counter for next run */
	g_SysOS_Counter_0++;
	if(g_SysOS_Counter_0 > P_SYS_OS_TASK_FACTOR_MAX_0)
	{
		/* Resetting the counter to zero will cause all tha tasks to be executed once again. */
		/* So Set the value of g_SysOS_Counter_0 to 1	*/
		g_SysOS_Counter_0 = 1; 
	}
#endif
}

/* Task Evaluation function for Core-1 */
void FUN_SYS_Internal_Evaluate_Tasks_x1_1(void)
{
	/**********************************************/
	/* Tasks with Factor 0 will not be considered */
	/* Tasks with Factor 1 will be Ignored        */
	/* Toggle the Tasks which has the factor of 2 */
	/**********************************************/

.for each myTask as Task in pSysOs.Config.Tasks
.if (CBool(myTask.Enabled) = True) And (myTask.Core = 1) then
.if myTask.Factor = 1 then
	/* Task $(myTask.Name) Ignored as the factor was 1 */
.elseif myTask.Factor = 0 then
	/* Task $(myTask.Name) Ignored as the factor was 0 */
.elseif myTask.Factor = 2 then
	/* Toggle the Tasks which has the factor of 2 */
	SysOS_Ctrl_1.Is$(myTask.Name) = !SysOS_Ctrl_1.Is$(myTask.Name);
.else
	SysOS_Ctrl_1.Is$(myTask.Name) = (g_SysOS_Counter_1 % $(myTask.Factor)) ? FALSE : TRUE;
.end if
.end if
.next
#if (P_SYS_OS_TASK_FACTOR_MAX_1 > 2)

	/* Increment the counter for next run */
	g_SysOS_Counter_1++;
	if(g_SysOS_Counter_1 > P_SYS_OS_TASK_FACTOR_MAX_1)
	{
		/* Resetting the counter to zero will cause all tha tasks to be executed once again. */
		/* So Set the value of g_SysOS_Counter_1 to 1	*/
		g_SysOS_Counter_1 = 1; 
	}
#endif
}

void SysOs_ExecuteTask(TaskHandle_t xHandle);
void SysOs_ExecuteTask(TaskHandle_t xHandle)
{
	if(xHandle != NULL)
	{
#if S_SYS_OS_TASK_OVERRUN_MONITORING_ENABLED
		/* Checking if the previous instance of the Task is completed or not */
		eTaskState state = eTaskGetState(xHandle);

		if((state == eReady) || (state == eRunning))
		{
			// Task overrun had been happened
			// TODO: Report Task Overrun
			// FIXME: Should we skip the cycle? or should we suspend abruptly?
		}
		else
		{
			// Resume task
			vTaskResume( xHandle );
		}
#else
		vTaskResume( xHandle );
#endif
	}
	else
	{
		// TODO: ERROR: Task had been deleted 
	}
}

/* Task Execution function for Core-0 */
void FUN_SYS_Internal_Execute_Tasks_0(void)
{
.' Sort the Tasks by Factor and ignore the Tasks with 0 as Factor
. Dim myTasks as New List(Of Task)
.for each myTask as Task in pSysOs.Config.Tasks
.if (CBool(myTask.Enabled) = True) And (myTask.Core = 0) then
.if myTask.Factor <> 0 then
.myTasks.Add(myTask)
.end if
.end if
.next
.myTasks.Sort(Function(x, y) x.Factor.CompareTo(y.Factor))
.' Now loop thru the myTasks
.'
.for each myT as Task in myTasks

.if myT.Factor <> 1 then
	if(SysOS_Ctrl_0.Is$(myT.Name) == TRUE)
.end if
	{
		if(g_SysOs_TaskHandle_$(myT.Name) != NULL)
		{
			SysOs_ExecuteTask(g_SysOs_TaskHandle_$(myT.Name));
.if CBool(pSysOs.General.StackOverflowMonitoring) = True then
			
			if(SysOs_StackMonCount.cnt_$(myT.Name) > 0)
			{
				SysOs_StackMonCount.cnt_$(myT.Name)--;
			}
			else
			{
				/* This is thread blocking and might consume heavy run time. So, this might not be used alongside the Task Overrun Feature */
				SysOs_MinStackBytes.v$(myT.Name) = uxTaskGetStackHighWaterMark(g_SysOs_TaskHandle_$(myT.Name));
			}
.end if
		}
		else
		{
			/* Create the task */
			xTaskCreatePinnedToCore( PRC_SYSOS_TASK_$(myT.Name.ToUpper()), "$(myT.Name)", $(myT.StackSize), NULL, $(myT.Priority), &g_SysOs_TaskHandle_$(myT.Name), P_CPU_$(myT.Core) );
		}
	}
.next
}

/* Task Execution function for Core-1 */
void FUN_SYS_Internal_Execute_Tasks_1(void)
{
.' Sort the Tasks by Factor and ignore the Tasks with 0 as Factor
. Dim myTasks1 as New List(Of Task)
.for each myTask as Task in pSysOs.Config.Tasks
.if (CBool(myTask.Enabled) = True) And (myTask.Core = 1) then
.if myTask.Factor <> 0 then
.myTasks1.Add(myTask)
.end if
.end if
.next
.myTasks1.Sort(Function(x, y) x.Factor.CompareTo(y.Factor))
.' Now loop thru the myTasks
.'
.for each myT as Task in myTasks1

.if myT.Factor <> 1 then
	if(SysOS_Ctrl_1.Is$(myT.Name) == TRUE)
.end if
	{
		if(g_SysOs_TaskHandle_$(myT.Name) != NULL)
		{
			SysOs_ExecuteTask(g_SysOs_TaskHandle_$(myT.Name));
.if CBool(pSysOs.General.StackOverflowMonitoring) = True then
			
			if(SysOs_StackMonCount.cnt_$(myT.Name) > 0)
			{
				SysOs_StackMonCount.cnt_$(myT.Name)--;
			}
			else
			{
				/* This is thread blocking and might consume heavy run time. So, this might not be used alongside the Task Overrun Feature */
				SysOs_MinStackBytes.v$(myT.Name) = uxTaskGetStackHighWaterMark(g_SysOs_TaskHandle_$(myT.Name));
			}
.end if
		}
		else
		{
			/* Create the task */
			xTaskCreatePinnedToCore( PRC_SYSOS_TASK_$(myT.Name.ToUpper()), "$(myT.Name)", $(myT.StackSize), NULL, $(myT.Priority), &g_SysOs_TaskHandle_$(myT.Name), P_CPU_$(myT.Core) );
		}
	}
.next
}

.if CBool(pSysOs.General.StackOverflowMonitoring) = True then
/* Function to check if the Stack Calculation has been completed or not */
BOOL FUN_SYS_IsStackCalculationCompleted(void)
{
	BOOL retval = FALSE;
	
	if( TRUE
.for each myTask as Task in pSysOs.Config.Tasks
.if CBool(myTask.Enabled) = True then
      && (SysOs_StackMonCount.cnt_$(myTask.Name) == 0)
.end if
.next
	)
	{
		retval = TRUE;
	}
	
	return retval;
}
.end if

.end if ' Dual core check


.endoutput
.end module