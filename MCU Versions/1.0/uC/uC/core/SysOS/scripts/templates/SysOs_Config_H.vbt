.imports system
.imports system.io
.Imports System.Collections.Generic
.public module SysOs_Config_H_VBT

. private MaxTaskFactor_0 as UInteger = 0
. private MaxTaskFactor_1 as UInteger = 0
. private MaxTaskFactor as UInteger = 0

.output SysOs_Config.h
.sw.writeline(CopyRightsComments())
#ifndef __SYSOS_CONFIG_H__
#define __SYSOS_CONFIG_H__

.if CBool(pSysOs.General.StackOverflowMonitoring) = True then
#include "freertos/portmacro.h"

.end if
/*************************************************/
/* Functional Switches and Parameter Definitions */
/*************************************************/

/* Defining SysOs Method */
#define S_SYS_OS_METHOD                 S_SYS_OS_$(pSysOs.General.Method.ToUpper())_METHOD

/* SysOs Tick */
#define P_SYS_OS_TICK                   $(pSysOs.General.Tick)

/* SysOS Main Function Type */
#define S_SYS_OS_MAIN_FUNCTION_TYPE     S_SYS_OS_$(pSysOs.General.MainFunctionType.ToUpper())_MAIN_FUNCTION_TYPE

/* Switches and Parameters for SysOs Tasks */
.if pSysOs.Config.Tasks.Count = 0 Then
#define S_SYS_OS_TASKS_DISABLED
.else
#define S_SYS_OS_TASKS_ENABLED
.end if

.for each myTask as Task in pSysOs.Config.Tasks
.if CBool(myTask.Enabled) = True then
#define S_SYS_OS_TASK_$(myTask.Name)     ON
.else
#define S_SYS_OS_TASK_$(myTask.Name)     OFF
.end if
#define P_SYS_OS_TASK_FACTOR_$(myTask.Name)     $(myTask.Factor)

.next

.if CBool(pSysOs.General.DualCoreScheduling) = True then
#define S_SYS_OS_DUAL_CORE_ENABLED       TRUE

/* CPU Definitions */
#define P_CPU_0                          0
#define P_CPU_1                          1

#define P_STARTUP_CPU                    P_CPU_0

#define P_PRIMARY_CPU                    P_CPU_0
#define P_SECONDARY_CPU                  P_CPU_1

/* Defining MAX Parameter for the Task Factor to reset the counters */
.MaxTaskFactor_0 = SysOs_Get_MaxTaskFactor(0)
#define P_SYS_OS_TASK_FACTOR_MAX_0      $(MaxTaskFactor_0)
.MaxTaskFactor_1 = SysOs_Get_MaxTaskFactor(1)
#define P_SYS_OS_TASK_FACTOR_MAX_1      $(MaxTaskFactor_1)
.MaxTaskFactor = If((MaxTaskFactor_0 > MaxTaskFactor_1), MaxTaskFactor_0, MaxTaskFactor_1)
#define P_SYS_OS_TASK_FACTOR_MAX        $(MaxTaskFactor)
.else
#define S_SYS_OS_DUAL_CORE_ENABLED       FALSE

/* Defining MAX Parameter for the Task Factor to reset the counter */
.MaxTaskFactor_0 = SysOs_Get_MaxTaskFactor(0)
#define P_SYS_OS_TASK_FACTOR_MAX         $(MaxTaskFactor_0)
.end if

.if CBool(pSysOs.General.TaskOverrunMonitoring) = True then
#define S_SYS_OS_TASK_OVERRUN_MONITORING_ENABLED       TRUE
.else
#define S_SYS_OS_TASK_OVERRUN_MONITORING_ENABLED       FALSE
.end if

.if CBool(pSysOs.General.StackOverflowMonitoring) = True then
#define S_SYS_OS_STACK_OVERFLOW_MONITORING_ENABLED       TRUE

#define P_SYS_OS_STACK_OVERFLOW_WAIT_CYCLES              $(pSysOs.General.StackOverflowWaitCycles)
.else
#define S_SYS_OS_STACK_OVERFLOW_MONITORING_ENABLED       FALSE
.end if

/*************************************************/
/*  Type Definitions and Variable Declarations   */
/*************************************************/
.if CBool(pSysOs.General.DualCoreScheduling) = True then

typedef struct __SysOS_Ctrl_0_ST
{
.for each myTask as Task in pSysOs.Config.Tasks
.if (CBool(myTask.Enabled) = True) And (myTask.Core = 0) then
    UBYTE Is$(myTask.Name)   : 1;
.end if
.next
}SysOS_Ctrl_0_ST;

typedef struct __SysOS_Ctrl_1_ST
{
.for each myTask as Task in pSysOs.Config.Tasks
.if (CBool(myTask.Enabled) = True) And (myTask.Core = 1) then
    UBYTE Is$(myTask.Name)   : 1;
.end if
.next
}SysOS_Ctrl_1_ST;

extern SysOS_Ctrl_0_ST SysOS_Ctrl_0;
extern SysOS_Ctrl_1_ST SysOS_Ctrl_1;

.if CBool(pSysOs.General.StackOverflowMonitoring) = True then
typedef struct __SysOs_MinStack_ST
{
.for each myTask as Task in pSysOs.Config.Tasks
.if CBool(myTask.Enabled) = True then
	UBaseType_t v$(myTask.Name);
.end if
.next
}SysOs_MinStack_ST;

extern SysOs_MinStack_ST SysOs_MinStackBytes;

typedef struct __SysOs_StackMonCount_ST
{
.for each myTask as Task in pSysOs.Config.Tasks
.if CBool(myTask.Enabled) = True then
	UBaseType_t cnt_$(myTask.Name);
.end if
.next
}SysOs_StackMonCount_ST;

extern SysOs_StackMonCount_ST SysOs_StackMonCount;
.end if

.else
typedef struct __SysOS_Ctrl_ST
{
.if pSysOs.General.Method.ToUpper() = "POLLING" then
	UBYTE ExecPending  : 1;
.end if
.for each myTask as Task in pSysOs.Config.Tasks
.if CBool(myTask.Enabled) = True then
    UBYTE Is$(myTask.Name)   : 1;
.end if
.next
}SysOS_Ctrl_ST;

extern SysOS_Ctrl_ST SysOS_Ctrl;
.end if

.if MaxTaskFactor_0 > 2 then
extern UWORD g_SysOS_Counter_0;
.end if
.if MaxTaskFactor_1 > 2 then
extern UWORD g_SysOS_Counter_1;
.end if

/*************************************************/
/*  Function Declarations & Inline Definitions   */
/*************************************************/

.for each myTask as Task in pSysOs.Config.Tasks
.if CBool(myTask.Enabled) = True then
.if (pSysOs.General.Method.ToUpper() = "RTOS") then
extern void PRC_SYSOS_TASK_$(myTask.Name.ToUpper())(void * args);
.else
extern void PRC_SYSOS_TASK_$(myTask.Name.ToUpper())(void);
.end if
.end if
.next

extern void FUN_SYS_Internal_Init(void);

.if CBool(pSysOs.General.DualCoreScheduling) = False then
extern void FUN_SYS_Internal_Evaluate_Tasks_x1(void);
extern void FUN_SYS_Internal_Execute_Tasks(void);
.else
extern void FUN_SYS_Internal_Evaluate_Tasks_x1_0(void);
extern void FUN_SYS_Internal_Evaluate_Tasks_x1_1(void);
extern void FUN_SYS_Internal_Execute_Tasks_0(void);
extern void FUN_SYS_Internal_Execute_Tasks_1(void);
extern BOOL Task_Overrun_Flag;
.if CBool(pSysOs.General.StackOverflowMonitoring) = True then
extern BOOL FUN_SYS_IsStackCalculationCompleted(void);
.end if
.end if

#endif /* __SYSOS_CONFIG_H__ */

.endoutput
.end module